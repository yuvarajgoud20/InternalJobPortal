/*
Deployment script for InternalJobPortalDB-Tream2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "InternalJobPortalDB-Tream2"
:setvar DefaultFilePrefix "InternalJobPortalDB-Tream2"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (MAX_STORAGE_SIZE_MB = 1000) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
    END


GO
PRINT N'Creating Table [dbo].[ApplyJob]...';


GO
CREATE TABLE [dbo].[ApplyJob] (
    [PostID]            INT      NOT NULL,
    [EmployeeID]        CHAR (6) NOT NULL,
    [AppliedDate]       DATETIME NULL,
    [ApplicationStatus] CHAR (1) NULL,
    PRIMARY KEY CLUSTERED ([PostID] ASC, [EmployeeID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Employee]...';


GO
CREATE TABLE [dbo].[Employee] (
    [EmployeeID]      CHAR (6)     NOT NULL,
    [EmployeeName]    VARCHAR (30) NULL,
    [EmailID]         VARCHAR (40) NULL,
    [PhoneNo]         CHAR (10)    NULL,
    [TotalExperience] INT          NULL,
    [JobID]           CHAR (6)     NULL,
    PRIMARY KEY CLUSTERED ([EmployeeID] ASC)
);


GO
PRINT N'Creating Table [dbo].[EmployeeSkill]...';


GO
CREATE TABLE [dbo].[EmployeeSkill] (
    [EmployeeID]      CHAR (6) NOT NULL,
    [SkillID]         CHAR (6) NOT NULL,
    [SkillExperience] INT      NULL,
    PRIMARY KEY CLUSTERED ([EmployeeID] ASC, [SkillID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Job]...';


GO
CREATE TABLE [dbo].[Job] (
    [JobID]          CHAR (6)      NOT NULL,
    [JobTitle]       VARCHAR (40)  NULL,
    [JobDescription] VARCHAR (300) NULL,
    [Salary]         MONEY         NULL,
    PRIMARY KEY CLUSTERED ([JobID] ASC)
);


GO
PRINT N'Creating Table [dbo].[JobPost]...';


GO
CREATE TABLE [dbo].[JobPost] (
    [PostID]          INT      IDENTITY (1, 1) NOT NULL,
    [JobID]           CHAR (6) NULL,
    [DateOfPosting]   DATETIME NULL,
    [LastDateToApply] DATETIME NULL,
    [NoOfVacancies]   INT      NULL,
    PRIMARY KEY CLUSTERED ([PostID] ASC)
);


GO
PRINT N'Creating Table [dbo].[JobSkill]...';


GO
CREATE TABLE [dbo].[JobSkill] (
    [JobID]      CHAR (6) NOT NULL,
    [SkillID]    CHAR (6) NOT NULL,
    [Experience] INT      NULL,
    PRIMARY KEY CLUSTERED ([JobID] ASC, [SkillID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Skill]...';


GO
CREATE TABLE [dbo].[Skill] (
    [SkillID]    CHAR (6)     NOT NULL,
    [SkillName]  VARCHAR (40) NULL,
    [SkillLevel] CHAR (1)     NULL,
    PRIMARY KEY CLUSTERED ([SkillID] ASC)
);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[ApplyJob]...';


GO
ALTER TABLE [dbo].[ApplyJob] WITH NOCHECK
    ADD FOREIGN KEY ([EmployeeID]) REFERENCES [dbo].[Employee] ([EmployeeID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[ApplyJob]...';


GO
ALTER TABLE [dbo].[ApplyJob] WITH NOCHECK
    ADD FOREIGN KEY ([PostID]) REFERENCES [dbo].[JobPost] ([PostID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Employee]...';


GO
ALTER TABLE [dbo].[Employee] WITH NOCHECK
    ADD FOREIGN KEY ([JobID]) REFERENCES [dbo].[Job] ([JobID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[EmployeeSkill]...';


GO
ALTER TABLE [dbo].[EmployeeSkill] WITH NOCHECK
    ADD FOREIGN KEY ([EmployeeID]) REFERENCES [dbo].[Employee] ([EmployeeID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[EmployeeSkill]...';


GO
ALTER TABLE [dbo].[EmployeeSkill] WITH NOCHECK
    ADD FOREIGN KEY ([SkillID]) REFERENCES [dbo].[Skill] ([SkillID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[JobPost]...';


GO
ALTER TABLE [dbo].[JobPost] WITH NOCHECK
    ADD FOREIGN KEY ([JobID]) REFERENCES [dbo].[Job] ([JobID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[JobSkill]...';


GO
ALTER TABLE [dbo].[JobSkill] WITH NOCHECK
    ADD FOREIGN KEY ([JobID]) REFERENCES [dbo].[Job] ([JobID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[JobSkill]...';


GO
ALTER TABLE [dbo].[JobSkill] WITH NOCHECK
    ADD FOREIGN KEY ([SkillID]) REFERENCES [dbo].[Skill] ([SkillID]);


GO
PRINT N'Creating Check Constraint [dbo].[ApplicationStatus]...';


GO
ALTER TABLE [dbo].[ApplyJob] WITH NOCHECK
    ADD CONSTRAINT [ApplicationStatus] CHECK (ApplicationStatus IN ('P','A','R'));


GO
PRINT N'Creating Check Constraint [dbo].[CK_SkillLevel_Column]...';


GO
ALTER TABLE [dbo].[Skill] WITH NOCHECK
    ADD CONSTRAINT [CK_SkillLevel_Column] CHECK (SkillLevel IN ('B','I','A'));


GO
